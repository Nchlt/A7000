# 1 "SourceLexer.mll"
 

  open Lexing
  open SourceParser

  let id_or_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "true",     CONST_BOOL(true);
	"false",    CONST_BOOL(false);
	"while",    WHILE;
	"if",       IF;
	"then",     THEN;
	"else",     ELSE;
	"for",      FOR;
	"integer",  INT;
	"boolean",  BOOL;
	"print",    PRINT;
	"var",      VAR;
	(* "throw",    THROW; *)
	(* "try",      TRY; *)
	(* "catch",    CATCH; *)
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)

  exception SyntaxError of string
	

# 33 "SourceLexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\231\255\232\255\001\000\001\000\001\000\002\000\003\000\
    \241\255\001\000\004\000\004\000\245\255\246\255\247\255\248\255\
    \249\255\084\000\018\000\034\000\002\000\255\255\253\255\244\255\
    \234\255\233\255\240\255\239\255\237\255\236\255\235\255\086\000\
    \251\255\252\255\036\000\036\000\255\255\254\255\253\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\023\000\023\000\017\000\023\000\023\000\
    \255\255\013\000\012\000\023\000\255\255\255\255\255\255\255\255\
    \255\255\004\000\003\000\005\000\001\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\003\000\003\000\255\255\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\020\000\021\000\020\000\000\000\020\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\006\000\020\000\000\000\000\000\000\000\004\000\029\000\
    \019\000\016\000\008\000\010\000\013\000\009\000\025\000\024\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\011\000\012\000\005\000\007\000\028\000\027\000\
    \026\000\023\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\022\000\038\000\037\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\000\000\014\000\000\000\017\000\
    \036\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\003\000\030\000\035\000\000\000\
    \034\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\255\255\000\000\255\255\020\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\020\000\255\255\255\255\255\255\000\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\006\000\
    \007\000\011\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\019\000\034\000\035\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \031\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\003\000\031\000\255\255\
    \031\000\255\255\255\255\255\255\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\255\255\
    \255\255\255\255\255\255\017\000\255\255\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\031\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 38 "SourceLexer.mll"
      ( Lexing.new_line lexbuf; token lexbuf )
# 162 "SourceLexer.ml"

  | 1 ->
# 40 "SourceLexer.mll"
      ( token lexbuf )
# 167 "SourceLexer.ml"

  | 2 ->
# 42 "SourceLexer.mll"
      ( comment lexbuf; token lexbuf )
# 172 "SourceLexer.ml"

  | 3 ->
# 44 "SourceLexer.mll"
      ( CONST_INT (int_of_string (lexeme lexbuf)) )
# 177 "SourceLexer.ml"

  | 4 ->
# 46 "SourceLexer.mll"
      ( id_or_keyword (lexeme lexbuf) )
# 182 "SourceLexer.ml"

  | 5 ->
# 48 "SourceLexer.mll"
      ( BEGIN )
# 187 "SourceLexer.ml"

  | 6 ->
# 50 "SourceLexer.mll"
      ( END )
# 192 "SourceLexer.ml"

  | 7 ->
# 52 "SourceLexer.mll"
      ( OB )
# 197 "SourceLexer.ml"

  | 8 ->
# 54 "SourceLexer.mll"
      ( CB )
# 202 "SourceLexer.ml"

  | 9 ->
# 56 "SourceLexer.mll"
      ( COMMA )
# 207 "SourceLexer.ml"

  | 10 ->
# 58 "SourceLexer.mll"
      ( SEMI )
# 212 "SourceLexer.ml"

  | 11 ->
# 60 "SourceLexer.mll"
      ( SET )
# 217 "SourceLexer.ml"

  | 12 ->
# 62 "SourceLexer.mll"
      ( PLUS )
# 222 "SourceLexer.ml"

  | 13 ->
# 64 "SourceLexer.mll"
      ( MINUS )
# 227 "SourceLexer.ml"

  | 14 ->
# 66 "SourceLexer.mll"
      ( STAR )
# 232 "SourceLexer.ml"

  | 15 ->
# 68 "SourceLexer.mll"
      ( EQUAL )
# 237 "SourceLexer.ml"

  | 16 ->
# 70 "SourceLexer.mll"
      ( NEQ )
# 242 "SourceLexer.ml"

  | 17 ->
# 72 "SourceLexer.mll"
      ( LT )
# 247 "SourceLexer.ml"

  | 18 ->
# 74 "SourceLexer.mll"
      ( LE )
# 252 "SourceLexer.ml"

  | 19 ->
# 76 "SourceLexer.mll"
      ( AND )
# 257 "SourceLexer.ml"

  | 20 ->
# 78 "SourceLexer.mll"
      ( OR )
# 262 "SourceLexer.ml"

  | 21 ->
# 80 "SourceLexer.mll"
      ( INCR )
# 267 "SourceLexer.ml"

  | 22 ->
# 82 "SourceLexer.mll"
      ( DECR )
# 272 "SourceLexer.ml"

  | 23 ->
# 84 "SourceLexer.mll"
      ( raise ( SyntaxError ("Unknown character : " ^ (lexeme lexbuf))) )
# 277 "SourceLexer.ml"

  | 24 ->
# 86 "SourceLexer.mll"
      ( EOF )
# 282 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 31
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "SourceLexer.mll"
      ( new_line lexbuf; comment lexbuf )
# 294 "SourceLexer.ml"

  | 1 ->
# 92 "SourceLexer.mll"
      ( comment lexbuf; comment lexbuf )
# 299 "SourceLexer.ml"

  | 2 ->
# 94 "SourceLexer.mll"
      ( () )
# 304 "SourceLexer.ml"

  | 3 ->
# 96 "SourceLexer.mll"
      ( comment lexbuf )
# 309 "SourceLexer.ml"

  | 4 ->
# 98 "SourceLexer.mll"
      ( failwith "Unterminated comment" )
# 314 "SourceLexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

